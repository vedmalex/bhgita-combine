"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const verse_sizes_1 = require("./verse-sizes");
exports.transliterations = {
    XK: {
        title: 'Харвард Кийото',
        index: 0,
        default: false,
        input: true,
        output: true,
        caseSensitive: true,
    },
    Gaura: {
        title: 'Gaura Font',
        index: 1,
        default: false,
        input: true,
        output: true,
        caseSensitive: false,
    },
    html: {
        title: 'HTML код',
        index: 2,
        default: false,
        input: true,
        output: true,
        caseSensitive: false,
    },
    Unicode: {
        title: 'Юникод',
        index: 3,
        default: false,
        input: true,
        output: true,
        caseSensitive: false,
    },
    deva: {
        title: 'devanagari',
        index: 4,
        default: false,
        input: false,
        output: false,
        caseSensitive: false,
    },
    IAST: {
        title: 'IAST',
        index: 5,
        default: false,
        input: true,
        output: true,
        caseSensitive: false,
    },
    ISO15919: {
        title: 'ISO15919',
        index: 6,
        default: false,
        input: true,
        output: true,
        caseSensitive: false,
    },
    HK: {
        title: 'Harvard Kyoto',
        index: 7,
        default: false,
        input: true,
        output: true,
        caseSensitive: true,
    },
    ITRANS: {
        title: 'ITRANS',
        index: 8,
        default: false,
        input: true,
        output: true,
        caseSensitive: true,
    },
    Veltuis: {
        title: 'Veltuis',
        index: 9,
        default: false,
        input: true,
        output: true,
        caseSensitive: true,
    },
    SLP1: {
        title: 'SLP1',
        index: 10,
        default: false,
        input: true,
        output: true,
        caseSensitive: true,
    },
    WX: {
        title: 'WX',
        index: 11,
        default: false,
        input: true,
        output: true,
        caseSensitive: true,
    },
    long: {
        title: 'Длительность',
        index: 12,
        default: false,
        input: false,
        output: false,
        caseSensitive: false,
    },
    vedabase: {
        title: 'ScaGaudy',
        index: 13,
        default: true,
        input: true,
        output: false,
        caseSensitive: false,
    },
    flat: {
        title: 'Без диакритики',
        index: 14,
        default: true,
        input: false,
        output: true,
        caseSensitive: false,
    },
};
exports.sources = {
    XK: 0,
    Gaura: 1,
    html: 2,
    Unicode: 3,
    deva: 4,
    IAST: 5,
    ISO15919: 6,
    HK: 7,
    ITRANS: 8,
    Veltuis: 9,
    SLP1: 10,
    WX: 11,
    long: 12,
    vedabase: 13,
    flat: 14,
};
exports.sourcesNames = Object.keys(exports.sources);
exports.vowels = [
    ['а', 'а', 'а', 'а', 'अ', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', 'a', 'а'],
    [
        'А',
        ['', ''],
        'а&#772;',
        'а̄',
        'आ',
        'ā',
        'ā',
        'A',
        ['A', 'aa'],
        'aa',
        'A',
        'A',
        '-',
        'ä',
        'а',
    ],
    ['и', 'и', 'и', 'и', 'इ', 'i', 'i', 'i', 'i', 'i', 'i', 'i', '.', 'i', 'и'],
    [
        'И',
        'ӣ',
        'и&#772;',
        'ӣ',
        'ई',
        'ī',
        'ī',
        'I',
        ['I', 'ii'],
        'ii',
        'I',
        'I',
        '-',
        'é',
        'и',
    ],
    ['у', 'у', 'у', 'у', 'उ', 'u', 'u', 'u', 'u', 'u', 'u', 'u', '.', 'u', 'у'],
    [
        'У',
        'ӯ',
        'у&#772;',
        'ӯ',
        'ऊ',
        'ū',
        'ū',
        'U',
        ['U', 'uu'],
        'uu',
        'U',
        'U',
        '-',
        'ü',
        'у',
    ],
    [
        [' э', '^э'],
        [' э', '^э'],
        [' э', '^э'],
        [' э', '^э'],
        [' э', '^э'],
        'ए',
        [' e', '^e'],
        [' ē', '^ē'],
        [' e', '^e'],
        [' e', '^e'],
        [' e', '^e'],
        [' e', '^e'],
        '-',
        [' e', '^e'],
        [' э', '^э'],
    ],
    ['е', 'е', 'е', 'е', 'ए', 'e', 'ē', 'e', 'e', 'e', 'e', 'e', '-', 'e', 'е'],
    [
        'аи',
        'аи',
        'аи',
        'аи',
        'ऐ',
        'ai',
        'ai',
        'ai',
        'ai',
        'ai',
        'E',
        'E',
        '-',
        'ai',
        'аи',
    ],
    ['о', 'о', 'о', 'о', 'ओ', 'o', 'ō', 'o', 'o', 'o', 'o', 'o', '-', 'o', 'о'],
    [
        'ау',
        'ау',
        'ау',
        'ау',
        'औ',
        'au',
        'au',
        'au',
        'au',
        'au',
        'O',
        'O',
        '-',
        'au',
        'ау',
    ],
    [
        'Р',
        '',
        'р&#803;',
        'р̣',
        'ऋ',
        'ṛ',
        'r̥',
        'R',
        ['RRi', 'R^i'],
        '.r',
        'f',
        'q',
        '.',
        'å',
        'ри',
    ],
    [
        'РР',
        '',
        '&#772;&#803;',
        'р̣̄',
        'ॠ',
        'ṝ',
        'r̥̄',
        'RR',
        ['RRI', 'RRI', 'R^I'],
        '.rr',
        'F',
        'Q',
        '-',
        'è',
        'рри',
    ],
    [
        'лР',
        '',
        'л&#803',
        'л̣',
        'ऌ',
        'ḷ',
        'l̥',
        'lR',
        ['LLi', 'L^i'],
        '.l',
        'x',
        'L',
        '.',
        'ÿ',
        'лри',
    ],
    [
        'лРР',
        '',
        'л&#772;&#803',
        'л̣̄',
        'ॡ',
        'ḹ',
        'l̥̄',
        'lRR',
        ['LLI', 'L^I'],
        '.ll',
        'X',
        'LY',
        '-',
        'ÿ',
        'ллри',
    ],
];
exports.soundless = [
    [
        'М',
        '',
        'м&#775;',
        'м̇',
        'अं',
        ['ṁ', 'm̃'],
        'ṁ',
        'M',
        ['M', '.n', '.m'],
        '.m',
        'M',
        'M',
        '||',
        'à',
        'м',
    ],
    [
        'Х',
        '',
        'х&#803;',
        'х̣',
        'अः',
        'ḥ',
        'ḥ',
        'H',
        'H',
        '.h',
        'H',
        'H',
        '||',
        'ù',
        'х',
    ],
    [
        '.Н',
        '',
        'м&#784;',
        'м̐',
        'अँ',
        'ṁ',
        'm̐',
        'М',
        '.N',
        '.m',
        '~',
        'az',
        '||',
        '',
        'м',
    ],
    [
        ["'", '’', '‘'],
        ["'", '’', '‘'],
        ["'", '’', '‘'],
        ["'", '’', '‘'],
        'ऽ',
        ["'", '’', '‘'],
        ["'", '’', '‘'],
        ["'", '’', '‘'],
        '.a',
        '.a',
        ["'", '’', '‘'],
        'Z',
        '',
        ['’', "'"],
        ['’', "'"],
    ],
];
exports.consonants = [
    ['к', 'к', 'к', 'к', 'क', 'k', 'k', 'k', 'k', 'k', 'k', 'k', '|', 'k', 'к'],
    [
        'кх',
        'кх',
        'кх',
        'кх',
        'ख',
        'kh',
        'kh',
        'kh',
        'kh',
        'kh',
        'K',
        'K',
        '|',
        'kh',
        'кх',
    ],
    ['г', 'г', 'г', 'г', 'ग', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '|', 'g', 'г'],
    [
        'гх',
        'гх',
        'гх',
        'гх',
        'घ',
        'gh',
        'gh',
        'gh',
        'gh',
        'gh',
        'G',
        'G',
        '|',
        'gh',
        'гх',
    ],
    [
        'Г',
        '',
        'н&#775;',
        'н̇',
        'ङ',
        'ṅ',
        'ṅ',
        'G',
        '~N',
        '"n',
        'N',
        'f',
        '|',
        'ì',
        'н',
    ],
    ['ч', 'ч', 'ч', 'ч', 'च', 'c', 'c', 'c', 'ch', 'c', 'c', 'c', '|', 'c', 'ч'],
    [
        'чх',
        'чх',
        'чх',
        'чх',
        'छ',
        'ch',
        'ch',
        'ch',
        'Ch',
        'ch',
        'C',
        'C',
        '|',
        'ch',
        'чх',
    ],
    [
        'дж',
        'дж',
        'дж',
        'дж',
        'ज',
        'j',
        'j',
        'j',
        'j',
        'j',
        'j',
        'j',
        '|',
        'j',
        'дж',
    ],
    [
        'джх',
        'джх',
        'джх',
        'джх',
        'झ',
        'jh',
        'jh',
        'jh',
        'jh',
        'jh',
        'J',
        'J',
        '|',
        'jh',
        'джх',
    ],
    [
        '~Н',
        '',
        'н&#771;',
        'н̃',
        'ञ',
        'ñ',
        'ñ',
        'J',
        '~n',
        '~n',
        'Y',
        'F',
        '|',
        'ï',
        'н',
    ],
    [
        'Т',
        '',
        'т&#803;',
        'т̣',
        'ट',
        'ṭ',
        'ṭ',
        'T',
        'T',
        '.t',
        'w',
        't',
        '|',
        'ö',
        'т',
    ],
    [
        'Тх',
        'х',
        'т&#803;х',
        'т̣х',
        'ठ',
        'ṭh',
        'ṭh',
        'Th',
        'Th',
        '.th',
        'W',
        'T',
        '|',
        'öh',
        'тх',
    ],
    [
        'Д',
        '',
        'д&#803;',
        'д̣',
        'ड',
        'ḍ',
        'ḍ',
        'D',
        'D',
        '.d',
        'q',
        'd',
        '|',
        'ò',
        'д',
    ],
    [
        'Дх',
        'х',
        'д&#803;х',
        'д̣х',
        'ढ',
        'ḍh',
        'ḍh',
        'Dh',
        'Dh',
        '.dh',
        'Q',
        'D',
        '|',
        'òh',
        'дх',
    ],
    [
        'Н',
        '',
        'н&#803;',
        'н̣',
        'ण',
        'ṇ',
        'ṇ',
        'N',
        'N',
        '.n',
        'R',
        'N',
        '|',
        'ë',
        'н',
    ],
    ['т', 'т', 'т', 'т', 'त', 't', 't', 't', 't', 't', 't', 'w', '|', 't', 'т'],
    [
        'тх',
        'тх',
        'тх',
        'тх',
        'थ',
        'th',
        'th',
        'th',
        'th',
        'th',
        'T',
        'W',
        '|',
        'th',
        'тх',
    ],
    ['д', 'д', 'д', 'д', 'द', 'd', 'd', 'd', 'd', 'd', 'd', 'x', '|', 'd', 'д'],
    [
        'дх',
        'дх',
        'дх',
        'дх',
        'ध',
        'dh',
        'dh',
        'dh',
        'dh',
        'dh',
        'D',
        'X',
        '|',
        'dh',
        'дх',
    ],
    ['н', 'н', 'н', 'н', 'न', 'n', 'n', 'n', 'n', 'n', 'n', 'n', '|', 'n', 'н'],
    ['п', 'п', 'п', 'п', 'प', 'p', 'p', 'p', 'p', 'p', 'p', 'p', '|', 'p', 'п'],
    [
        'пх',
        'пх',
        'пх',
        'пх',
        'फ',
        'ph',
        'ph',
        'ph',
        'ph',
        'ph',
        'P',
        'P',
        '|',
        'ph',
        'пх',
    ],
    ['б', 'б', 'б', 'б', 'ब', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '|', 'b', 'б'],
    [
        'бх',
        'бх',
        'бх',
        'бх',
        'भ',
        'bh',
        'bh',
        'bh',
        'bh',
        'bh',
        'B',
        'B',
        '|',
        'bh',
        'бх',
    ],
    ['м', 'м', 'м', 'м', 'म', 'm', 'm', 'm', 'm', 'm', 'm', 'm', '|', 'm', 'м'],
    [
        ['й', 'й'],
        ['й', 'й'],
        ['й', 'й'],
        ['й', 'й'],
        'य',
        'y',
        'y',
        'y',
        'y',
        'y',
        'y',
        'y',
        '|',
        'y',
        'й',
    ],
    ['р', 'р', 'р', 'р', 'र', 'r', 'r', 'r', 'r', 'r', 'r', 'r', '|', 'r', 'р'],
    ['л', 'л', 'л', 'л', 'ल', 'l', 'l', 'l', 'l', 'l', 'l', 'l', '|', 'l', 'л'],
    [
        'в',
        'в',
        'в',
        'в',
        'व',
        'v',
        'v',
        'v',
        ['v', 'w'],
        'v',
        'v',
        'v',
        '|',
        'v',
        'в',
    ],
    [
        'Ш',
        ['', ''],
        'ш&#769;',
        'ш́',
        'श',
        'ś',
        'ś',
        'z',
        'sh',
        '"s',
        'S',
        'S',
        '|',
        'ç',
        'ш',
    ],
    ['ш', 'ш', 'ш', 'ш', 'ष', 'ṣ', 'ṣ', 'S', 'Sh', '.s', 'z', 'R', '|', 'ñ', 'ш'],
    ['с', 'с', 'с', 'с', 'स', 's', 's', 's', 's', 's', 's', 's', '|', 's', 'с'],
    ['х', 'х', 'х', 'х', 'ह', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '|', 'h', 'х'],
];
exports.irregular = [
    [
        'кш',
        'кш',
        'кш',
        'кш',
        'क्ष',
        'kṣ',
        'kṣ',
        'kS',
        ['kS', 'kSh', 'x'],
        'k.s',
        'kz',
        'kR',
        '||',
        'kñ',
        'кш',
    ],
    [
        'тр',
        'тр',
        'тр',
        'тр',
        'त्र',
        'tr',
        'tr',
        'tr',
        'tr',
        'tr',
        'tr',
        'wr',
        '||',
        'tr',
        'тр',
    ],
    [
        'дж~Н',
        'дж',
        'джн&#771;',
        'джн̃',
        'ज्ञ',
        'jñ',
        'jñ',
        'jJ',
        ['GY', 'j~n'],
        'j~n',
        'jY',
        'jF',
        '||',
        'jï',
        'джн',
    ],
    [
        'Шр',
        'р',
        'ш&#769;р',
        'ш́р',
        'श्र',
        'śr',
        'śr',
        'zr',
        'shr',
        '"sr',
        'Sr',
        'Sr',
        '||',
        'çr',
        'шр',
    ],
];
exports.translationTable = [
    ...exports.consonants,
    ...exports.irregular,
    ...exports.vowels,
    ...exports.soundless,
];
exports.universal = mapTable => (_from = [0], _to = 1) => {
    if (!Array.isArray(_from))
        _from = [_from];
    const from = _from.map(f => (typeof f === 'string' ? exports.sources[f] : f));
    const to = typeof _to === 'string' ? exports.sources[_to] : _to;
    return lodash_1.orderBy(mapTable.reduce((res, line) => {
        const search = from
            .reduce((result, f) => {
            const caseSensitive = exports.transliterations[exports.sourcesNames[f]].caseSensitive;
            const res = [];
            if (Array.isArray(line[f])) {
                res.push(...line[f].map(i => i.replace(/\./g, '\\.')));
            }
            else {
                res.push(line[f].replace(/\./g, '\\.'));
            }
            result.push(...res.map(str => ({
                str,
                preserveCase: !caseSensitive,
            })));
            return result;
        }, [])
            .filter(x => x.str);
        res.push(...search.map(s => [
            s.str,
            Array.isArray(line[to]) ? line[to][0] : line[to],
            s.str.length,
            s.preserveCase,
        ]));
        return res;
    }, []), ['2'], ['desc']);
};
exports.mapperAll = exports.universal(exports.translationTable);
exports.mapperVowels = exports.universal(exports.vowels);
function replacerBase(_text, replacer) {
    let text = _text.replace(/^(.)/, ' $1');
    text = text.replace(/\n/g, '\n ');
    let result = replacer.reduce((text, sym) => {
        let res;
        if (sym[3]) {
            res = text.replace(new RegExp(sym[0], 'ig'), function (match) {
                const lower = match.toLowerCase();
                if (match === lower) {
                    return sym[1];
                }
                else {
                    return sym[1]
                        .split('')
                        .map((c, i) => {
                        if (match[i] !== lower[i]) {
                            return c.toUpperCase();
                        }
                        else {
                            return c;
                        }
                    })
                        .join('');
                }
            });
        }
        else {
            res = text.replace.apply(text, [new RegExp(sym[0], 'g'), sym[1]]);
        }
        return res;
    }, text);
    return result;
}
exports.replacerBase = replacerBase;
function replacerColorizer(_text, replacer) {
    let text = _text.replace(/^(.)/, ' $1');
    text = text.replace(/\n/g, '\n ');
    let result = replacer.reduce((text, sym) => {
        const res = text.replace(new RegExp(sym[0], `g${sym[3] ? 'i' : ''}`), '(.*)');
        return res;
    }, text);
    return result;
}
exports.converter = replacer => text => replacerBase(text, replacer)
    .replace(/^ (.)/, '$1')
    .replace(/\n /g, '\n');
exports.verseColor = replacer => text => {
    text = text
        .split('\n')
        .join('\n');
    return replacerColorizer(text, replacer)
        .replace(/^ (.)/, '$1')
        .replace(/\n /g, '\n');
};
exports.verseSize = replacer => text => {
    text = text.replace(/-(\n)*/g, '$1');
    text = text
        .split('\n')
        .map(s => s.replace(/\s/g, '_'))
        .map(s => s.replace(/-/g, ''))
        .join('\n');
    let result = replacerBase(text, replacer)
        .replace(/(\||\.)_\|/gi, '$1|')
        .replace(/(\.|-)\|\|+/gi, '-|')
        .replace(/\|+/gi, '')
        .replace(/\n/g, 'SUPER')
        .replace(/\s+/gi, '')
        .replace(/\.SUPER/g, '-SUPER')
        .replace(/\.$/g, '-')
        .replace(/SUPER/g, '\n')
        .replace(/_/gi, '')
        .replace(/\./g, 'U')
        .replace(/-/g, '—');
    result = result.split('\n').map(l => l.split(''));
    result = result.map(l => (l.some(s => !(s === '—' || s === 'U')) ? [] : l));
    const size = verse_sizes_1.detectSize(result);
    return { result, size };
};
//# sourceMappingURL=trans-new.js.map